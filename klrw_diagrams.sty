%% ----------------------------------------------------------------
%% klrw_diagrams --- A latex package for drawing KLRW diagrams
%% E-mail: andrew.mathas@gmail.com
%% Released under the LaTeX Project Public License v1.3c or later
%% See http://www.latex-project.org/lppl.txt
%% ----------------------------------------------------------------

\NeedsTeXFormat{LaTeX2e}
\def\klrw@version{Version 0.1-- 2022/06/21}
\ProvidesPackage{klrw_diagrams}[2022/06/21 Version 0.1\klrw@version\space- A package for weighted KLRW diagrams]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% required packages
\RequirePackage{xparse}
\RequirePackage{tikz}
\usetikzlibrary{decorations.markings,decorations.pathreplacing}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% TikZ style settings
\tikzset{
  anchorbase/.style={baseline={([yshift=#1]current bounding box.center)}},
  anchorbase/.default={-0.5ex},
  % dots on strings
  dot/.style = {
    decoration={
        markings,
        mark=at position #1 with {
            \node[circle, radius=2mm, inner sep=-2.0pt,
                  color = \pgfkeysvalueof{/tikz/dot colour},
                  fill  = \pgfkeysvalueof{/tikz/dot colour}
                 ]{};
        }
    },
    postaction={decorate}
  },
  dot/.default=0.5,
  dot colour/.initial=black, % allow ghost and solid dots to automatically
  dot colour/.default=black, % have the desired colour
  % styles for red, affine, solid and ghost strings
  redstring/.style = {
    draw=#1!50,
    fill=none,
    line width=0.35mm,
    preaction={draw=#1, line width=0.6mm, -},
    nodes={color=#1}
  },
  redstring/.default=red,
  affine/.style= {
    redstring=orange
  },
  solid/.style = {
    draw=#1,
    fill=none,
    line width=0.4mm,
    dot colour=#1,
    nodes={color=#1}
  },
  solid/.default=NavyBlue,
  ghost/.style = {
    solid=DarkGray,
    densely dashed
  }
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% idempotent diagrams of affine types A^{(1)}, A^{(2)}, C^{(1) and D^{(1)}

% \DottedIdempotent(distance)[dots]{e-1}{residues}
\NewDocumentCommand\DottedIdempotentA{ D(){3} omm} {
  \begin{tikzpicture}[anchorbase]
    \def\residues{{#4}}
    \foreach \res [count=\c,
                   evaluate=\res as \pos using {\res<=#3 ? #1*\res-\c*#1/15 : #1*(\res-2)-\c*#1/15}
        ] in {#4} {
          \coordinate (\c) at (\pos,0);
          \draw[solid](\c)node[below]{$\res$}--++(0,1);
          \ifnum\res=#3\relax\else
              \draw[ghost](\pos+#1,0)--++(0,1)node[above]{$\res$};
          \fi
          \ifnum\c=1\relax
              \draw[redstring](\pos+#1/15,0)node[below]{$\res$}--++(0,1);
          \fi
    }
    \foreach \pt [evaluate=\pt as \good using {\residues[\pt-1]==#3 ? 0 : 1} ] in {#2} {
      \draw[solid,dot](\pt)--++(0,1);
      \ifnum\good=1
          \draw[ghost,dot]([shift={(#1,0)}]\pt)--++(0,1);
      \fi
    }
  \end{tikzpicture}
}

% \DottedIdempotentAA*(distance)[dots]{e}{residues}
\NewDocumentCommand\DottedIdempotentAA{ s D(){3} O{} mm} {%
  \begin{tikzpicture}[anchorbase]
    \def\residues{{#5}}
    \foreach \res [count=\c, evaluate=\res as \pos using {\res<=#4 ? #2*\res-\c*#2/15 : #2*(\res-2)-\c*#2/15}] in {#5} {
      \coordinate (\c) at (\pos,0);
      \draw[solid](\c)node[below]{$\res$}--++(0,1);
      \ifnum\res=#4\relax\else
        \draw[ghost](\pos+#2,0)--++(0,1)node[above]{$\res$};
      \fi
      \ifnum\c=1\relax
        \IfBooleanTF{#1}{\draw[affine](\pos+#2/15,0)node[below]{$\res$}--++(0,1);}
                        {\draw[redstring](\pos+#2/15,0)node[below]{$\res$}--++(0,1);}
      \fi
    }
    \foreach \pt [evaluate=\pt as \good using {\residues[\pt-1]==#4 ? 0 : 1}] in {#3} {
      \draw[solid,dot](\pt)--++(0,1);
      \ifnum\good=1
          \draw[ghost,dot]([shift={(#2,0)}]\pt)--++(0,1);
      \fi
    }
  \end{tikzpicture}%
}

% \DottedCIdempotentC(distance)[dots]<k>{e-1}{residues}
% KLRW diagram for (dotted) idempotent diagram of type C^{(1)}_e and weight Lambda_k and residue i
\NewDocumentCommand\DottedIdempotentC{ D(){3} o D<>{0} mm} {%
  \begin{tikzpicture}[anchorbase,
    declare function={
        position(\x,\c)=\x<=#4 ? #1*\x-\c*#1/15 : #1*(\x-2)-\c*#1/15;
    }
    ]
    \def\residues{{#5}}
    \foreach \res [count=\c, evaluate=\res as \pos using {position(\res,\c)-position(#3,0)}] in {#5} {
      \coordinate (\c) at (\pos,0);
      \draw[solid](\c)node[below]{$\res$}--++(0,1);
      \ifnum\res=#4\relax\else
        \draw[ghost](\pos+#1,0)--++(0,1)node[above]{$\res$};
      \fi
      \ifnum\c=1\relax
        \draw[redstring](\pos+#1/15,0)node[below]{$\res$}--++(0,1);
      \fi
    }
    \foreach \pt [evaluate=\pt as \good using {\residues[\pt-1]==#4 ? 0 : 1} ] in {#2} {
      \draw[solid,dot](\pt)--++(0,1);
      \ifnum\good=1
        \draw[ghost,dot]([shift={(#1,0)}]\pt)--++(0,1);
      \fi
    }
  \end{tikzpicture}%
}

% \DottedIdempotentD*(distance)[dots]{e}{residues}
\NewDocumentCommand\DottedIdempotentD{ s D(){3} O{} mm} {%
  \begin{tikzpicture}[anchorbase]
    \def\residues{{#5}}
    \foreach \res [count=\c, evaluate=\res as \pos using {\res==0 ? #2*\res-\c*#2/15 : #2*(\res-2)-\c*#2/15} ] in {#5} {
      \coordinate (\c) at (\pos,0);
      \draw[solid](\c)node[below]{$\res$}--++(0,1);
      \ifnum\res=#4\relax
      \else
        \ifnum\res=1
          \draw[double,ghost](\pos+#2,0)--++(0,1)node[above]{$\res$};
        \else
          \ifnum\res>0
            \draw[ghost](\pos+#2,0)--++(0,1)node[above]{$\res$};
          \fi
        \fi
      \fi
      \ifnum\c=1\relax
        \IfBooleanTF{#1}{\draw[affine](\pos+#2/15,0)node[below]{$\res$}--++(0,1);}
                        {\draw[redstring](\pos+#2/15,0)node[below]{$\res$}--++(0,1);}
      \fi
    }
    \foreach \pt [evaluate=\pt as \res using {\residues[\pt-1]}] in {#3} {
      \draw[solid,dot](\pt)--++(0,1);
      \ifnum\res>1
        \ifnum\res<#4 \draw[ghost,dot]([shift={(#2,0)}]\pt)--++(0,1);\fi
      \fi
    }
  \end{tikzpicture}%
}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\endinput

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% CHANGE LOG
%%
%% Version 0.1
%%    o basic implementation extracted from the papers
%%        - Cellularity for weighted KLRW algebras of types B, A(2), D(2)
%%        - Subdivision and cellularity for weighted KLRW algebras
%%
